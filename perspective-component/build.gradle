import java.util.concurrent.TimeUnit


buildscript {
    repositories {
        gradlePluginPortal()
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url "https://nexus.inductiveautomation.com/repository/inductiveautomation-thirdparty/" }
        maven { url "https://nexus.inductiveautomation.com/repository/inductiveautomation-releases/" }
        maven { url "https://nexus.inductiveautomation.com/repository/inductiveautomation-snapshots/" }

    }

    ext.sdk_version = "8.0.9"

    dependencies {
        classpath("com.inductiveautomation.gradle:ignition-module-plugin:1.2.10-SNAPSHOT")
    }
}

plugins {
    id "base"
}

version "1.0.0"
group "org.fakester"


allprojects {
    apply plugin: "ignition-module-plugin"

    ignitionModule {
        // name of the .modl file to build
        fileName "RadComponents"

        // what is the name of the "root" gradle project for this module.  In this case, it"s "this", aka, the project
        // specified as <repoPath>/perspective-component/build.gradle
        moduleRoot "perspective-component"

        // module xml configuration
        moduleName "RadComponents"
        moduleId "org.fakester.radcomponent"
        moduleVersion "${project.version}"
        moduleDescription "A module that adds components to the Perspective module."
        requiredIgnitionVersion "8.0.10"
        requiredFrameworkVersion "8"
        isFree true
        license "license.html"
        moduleDependencies = [
                [scope: "G", moduleId: "com.inductiveautomation.perspective"],
                [scope: "D", moduleId: "com.inductiveautomation.perspective"]
        ]
        // map our projects to the scopes their jars should apply.  Web isn't here because its assets are moved
        // into the gateway resource folder as part of the module's build
        projectScopes = [
                [name: "gateway", scope: "G"],
                [name: "designer", scope: "D"],
                [name: "common", scope: "GD"]
        ]

        hooks = [
                [scope: "G", hookClass: "org.fakester.gateway.RadGatewayHook"],
                [scope: "D", hookClass: "org.fakester.designer.RadDesignerHook"]
        ]

    }

    if (project.plugins.hasPlugin("java")) {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    // check for new versions of dependencies more frequently than default 24 hours.
    configurations.all {
        resolutionStrategy {
            cacheChangingModulesFor(30, TimeUnit.SECONDS)
        }
    }

    // where should we try to resolve maven artifacts from?
    repositories {
        mavenLocal()
        mavenCentral()
        google()
        jcenter()

        maven {
            name "teamdev"
            url "http://maven.teamdev.com/repository/products"

        }
        maven { url "https://nexus.inductiveautomation.com/repository/inductiveautomation-releases/" }
        maven { url "https://nexus.inductiveautomation.com/repository/inductiveautomation-thirdparty/" }
        maven { url "https://nexus.inductiveautomation.com/repository/inductiveautomation-snapshots/" }
    }
}

task deepClean() {
    dependsOn allprojects.collect { "${it.path}:clean" }
    description "Executes clean tasks and remove node plugin caches."
    doLast {
        delete(file(".gradle"))
    }
}
